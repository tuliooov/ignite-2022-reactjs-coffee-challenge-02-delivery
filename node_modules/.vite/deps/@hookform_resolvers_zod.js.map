{
  "version": 3,
  "sources": ["../../@hookform/resolvers/src/validateFieldsNatively.ts", "../../@hookform/resolvers/src/toNestError.ts", "../../@hookform/resolvers/zod/src/zod.ts"],
  "sourcesContent": ["import {\n  get, FieldError, ResolverOptions, Ref, FieldErrors\n} from 'react-hook-form';\n\nconst setCustomValidity = (ref: Ref, fieldPath: string, errors: FieldErrors) => {\n  if (ref && 'reportValidity' in ref) {\n    const error = get(errors, fieldPath) as FieldError | undefined;\n    ref.setCustomValidity((error && error.message) || '');\n\n    ref.reportValidity();\n  }\n};\n\n// Native validation (web only)\nexport const validateFieldsNatively = <TFieldValues>(\n  errors: FieldErrors,\n  options: ResolverOptions<TFieldValues>,\n): void => {\n\n\n  for (const fieldPath in options.fields) {\n    const field = options.fields[fieldPath];\n    if (field && field.ref && 'reportValidity' in field.ref) {\n      setCustomValidity(field.ref, fieldPath, errors)\n    } else if (field.refs) {\n      field.refs.forEach((ref: HTMLInputElement) => setCustomValidity(ref, fieldPath, errors))\n    }\n  }\n};\n", "import {\n  set,\n  get,\n  FieldErrors,\n  Field,\n  ResolverOptions,\n} from 'react-hook-form';\nimport { validateFieldsNatively } from './validateFieldsNatively';\n\nexport const toNestError = <TFieldValues>(\n  errors: FieldErrors,\n  options: ResolverOptions<TFieldValues>,\n): FieldErrors<TFieldValues> => {\n  options.shouldUseNativeValidation && validateFieldsNatively(errors, options);\n\n  const fieldErrors = {} as FieldErrors<TFieldValues>;\n  for (const path in errors) {\n    const field = get(options.fields, path) as Field['_f'] | undefined;\n\n    set(\n      fieldErrors,\n      path,\n      Object.assign(errors[path], { ref: field && field.ref }),\n    );\n  }\n\n  return fieldErrors;\n};\n", "import {\n  appendErrors,\n  FieldError,\n  FieldErrors,\n} from 'react-hook-form';\nimport { z } from 'zod';\nimport { toNestError, validateFieldsNatively } from '@hookform/resolvers';\nimport type { Resolver } from './types';\n\nconst parseErrorSchema = (\n  zodErrors: z.ZodIssue[],\n  validateAllFieldCriteria: boolean,\n) => {\n  const errors: Record<string, FieldError> = {};\n  for (; zodErrors.length;) {\n    const error = zodErrors[0];\n    const { code, message, path } = error;\n    const _path = path.join('.');\n\n    if (!errors[_path]) {\n      if ('unionErrors' in error) {\n        const unionError = error.unionErrors[0].errors[0];\n\n        errors[_path] = {\n          message: unionError.message,\n          type: unionError.code,\n        };\n      } else {\n        errors[_path] = { message, type: code };\n      }\n    }\n\n    if ('unionErrors' in error) {\n      error.unionErrors.forEach((unionError) =>\n        unionError.errors.forEach((e) => zodErrors.push(e)),\n      );\n    }\n\n    if (validateAllFieldCriteria) {\n      const types = errors[_path].types;\n      const messages = types && types[error.code];\n\n      errors[_path] = appendErrors(\n        _path,\n        validateAllFieldCriteria,\n        errors,\n        code,\n        messages\n          ? ([] as string[]).concat(messages as string[], error.message)\n          : error.message,\n      ) as FieldError;\n    }\n\n    zodErrors.shift();\n  }\n\n  return errors;\n};\n\nexport const zodResolver: Resolver =\n  (schema, schemaOptions, resolverOptions = {}) =>\n    async (values, _, options) => {\n      try {\n        const data = await schema[\n          resolverOptions.mode === 'sync' ? 'parse' : 'parseAsync'\n        ](values, schemaOptions);\n\n        options.shouldUseNativeValidation && validateFieldsNatively({}, options);\n\n        return {\n          errors: {} as FieldErrors,\n          values: resolverOptions.rawValues ? values : data,\n        };\n      } catch (error: any) {\n        return {\n          values: {},\n          errors: error.isEmpty\n            ? {}\n            : toNestError(\n              parseErrorSchema(\n                error.errors,\n                !options.shouldUseNativeValidation &&\n                options.criteriaMode === 'all',\n              ),\n              options,\n            ),\n        };\n      }\n    };\n"],
  "mappings": "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",
  "names": []
}
